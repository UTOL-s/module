name: Release fxEcho Module

on:
  push:
    branches:
      - '**'
    tags:
      - 'fxecho-v*'
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., fxecho-v1.0.0)'
        required: true
        type: string

env:
  GO_VERSION: '1.24.2'
  MODULE_NAME: 'github.com/UTOL-s/module/fxEcho'
  MODULE_PATH: './fxEcho'

jobs:
  validate-version:
    name: Validate Semantic Version
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate semantic version
        uses: ietf-tools/semver-action@v1
        with:
          version: ${{ github.ref_name }}

  test:
    name: Test fxEcho
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run fxEcho tests
        run: go test -v ${{ env.MODULE_PATH }}

      - name: Run vet on fxEcho
        run: go vet ${{ env.MODULE_PATH }}

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l ${{ env.MODULE_PATH }} | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Please run 'gofmt -s -w ${{ env.MODULE_PATH }}'"
            exit 1
          fi

  build:
    name: Build fxEcho
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download dependencies
        run: go mod download

      - name: Build fxEcho
        run: go build -v ${{ env.MODULE_PATH }}

      - name: Verify module
        run: go mod verify

  release:
    name: Release fxEcho
    runs-on: ubuntu-latest
    needs: [test, build]
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "changelog=Manual release ${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
            if [ -z "$PREVIOUS_TAG" ]; then
              CHANGELOG=$(git log --oneline --no-merges --pretty=format:"- %s" HEAD -- ${{ env.MODULE_PATH }})
            else
              CHANGELOG=$(git log --oneline --no-merges --pretty=format:"- %s" $PREVIOUS_TAG..HEAD -- ${{ env.MODULE_PATH }})
            fi
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: fxEcho Release ${{ steps.version.outputs.version }}
          body: |
            ## fxEcho Module Release ${{ steps.version.outputs.version }}
            
            ### Changes
            
            ${{ steps.changelog.outputs.changelog }}
            
            ### Installation
            
            ```bash
            go get ${{ env.MODULE_NAME }}@${{ steps.version.outputs.version }}
            ```
            
            ### Usage
            
            ```go
            import (
                "go.uber.org/fx"
                "${{ env.MODULE_NAME }}"
            )
            
            func main() {
                app := fx.New(
                    fxecho.FxEcho,
                    // ... other modules
                )
                app.Run()
            }
            ```
            
            ### Features
            
            - Echo web framework integration
            - HTTP server setup
            - Route management
            - Middleware support
          draft: false
          prerelease: false

      - name: Publish to Go Module Proxy
        run: |
          go get ${{ env.MODULE_NAME }}@${{ steps.version.outputs.version }}
          go list -m -versions ${{ env.MODULE_NAME }} 