name: Release

on:
  push:
    branches: [ main ]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.x'

    - name: Verify dependencies
      run: go mod verify

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: |
        go test -v ./fxConfig/...
        go test -v ./fxEcho/...

    - name: Run go vet
      run: go vet ./...

    - name: Determine version
      id: version
      run: |
        # Get the latest tag
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $latest_tag"
        
        # Get commit messages since last tag
        commits=$(git log --pretty=format:"%s" $latest_tag..HEAD)
        echo "Commits since last tag:"
        echo "$commits"
        
        # Determine version bump based on commit prefixes
        major_bump=false
        minor_bump=false
        patch_bump=false
        
        while IFS= read -r commit; do
          if [[ $commit =~ ^(breaking|major): ]]; then
            major_bump=true
          elif [[ $commit =~ ^(feature|feat): ]]; then
            minor_bump=true
          elif [[ $commit =~ ^(fix|bugfix|perf|refactor|test): ]]; then
            patch_bump=true
          fi
        done <<< "$commits"
        
        # Extract version numbers
        version_parts=(${latest_tag#v})
        major=${version_parts[0]:-0}
        minor=${version_parts[1]:-0}
        patch=${version_parts[2]:-0}
        
        # Calculate new version
        if [ "$major_bump" = true ]; then
          major=$((major + 1))
          minor=0
          patch=0
        elif [ "$minor_bump" = true ]; then
          minor=$((minor + 1))
          patch=0
        elif [ "$patch_bump" = true ]; then
          patch=$((patch + 1))
        else
          # Default to patch bump if no conventional commits found
          patch=$((patch + 1))
        fi
        
        new_version="v${major}.${minor}.${patch}"
        echo "New version: $new_version"
        echo "version=$new_version" >> $GITHUB_OUTPUT

    - name: Create tag
      run: |
        git tag ${{ steps.version.outputs.version }}
        git push origin ${{ steps.version.outputs.version }}

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## Changes in ${{ steps.version.outputs.version }}
          
          This release includes updates to the fx modules:
          - fxConfig: Configuration management module
          - fxEcho: Echo service module
          
          ### Commit History
          $(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 2>/dev/null || echo "")..HEAD)
        draft: false
        prerelease: false

    - name: Publish to Go Package Registry
      run: |
        # The module will be automatically available via go get
        # after the release is created and the tag is pushed
        echo "Module published to Go package registry"
        echo "Available at: github.com/UTOL-s/module@${{ steps.version.outputs.version }}" 